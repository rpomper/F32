plot$Sub.Num=as.character(plot$Sub.Num)
excluded = as.numeric(unique(plot$Sub.Num[plot$N<4]))
d = d %>% filter(Sub.Num != excluded & percentMissingFrames < 50)
head(d)
d = d %>% filter(Sub.Num != excluded) %>% filter(percentMissingFrames < 50)
excluded
# d = d %>% filter(Sub.Num != excluded & percentMissingFrames < 50)
d = d %>% filter(percentMissingFrames < 50)
# clean up
remove(plot,groupplot,excluded)
temp <- d %>%
select(c('Sub.Num','Group','Tr.Num','Order','Condition','Time','percentMissingFrames')) %>%
filter(Time==0, Sub.Num==7001) %>%
group_by(Sub.Num,Group,Condition) %>% summarise(N=sum(!is.na(percentMissingFrames[percentMissingFrames<50])))
dc = d %>%
filter(Time>=300 & Time <=1800 & percentMissingFrames < 50) %>%
group_by(Sub.Num,Group,Time) %>%
summarise(Accuracy = mean(Accuracy,na.rm=TRUE))
# T stats for each time bin for the competition effect
ts <- dc %>%
group_by(Time) %>%
summarise_each(funs(t.test(.[Group == "TD"], .[Group == "ASD"], paired = FALSE)$statistic), vars = Accuracy) %>%
mutate(Sig = ifelse(abs(vars)>2,"yes","no"))
ts
ggplot(data=ts,aes(x=Time,y=vars,color=Sig)) +
geom_point()+
theme_bw() +
scale_color_manual(values=c("black","red")) +
geom_hline(yintercept = 2) +
geom_hline(yintercept = -2) +
scale_x_continuous(breaks=seq(from=300,to=1800,by=300)) +
labs(x='Time since target onset (in ms)',y='t-test (TD vs. ASD)',title='Group Effect')
ts = ts %>% select(Time,vars)
ts
m = t
colnames(m) <- c("time", "stat")
m = ts
colnames(m) <- c("time", "stat")
# Calculate all cluster sizes
d_clust <- m %>%
mutate(
sig = ifelse(stat >= threshold, "pos",
ifelse(stat <= -threshold, "neg", "ns")),
cluster = data.table::rleid(sig)
) %>%
filter(sig != "ns") %>%
group_by(cluster) %>%
summarise(
start = min(time),
stop = max(time),
auc = sum(stat))
threshold = 2
# Calculate all cluster sizes
d_clust <- m %>%
mutate(
sig = ifelse(stat >= threshold, "pos",
ifelse(stat <= -threshold, "neg", "ns")),
cluster = data.table::rleid(sig)
) %>%
filter(sig != "ns") %>%
group_by(cluster) %>%
summarise(
start = min(time),
stop = max(time),
auc = sum(stat))
d_clust
max_cluster = data.frame(cluster=0,start=0,stop=0,auc=0)
max_cluster
if(nrow(d_clust) > 0) {max_cluster = d_clust[which.max(abs(d_clust$auc)),]}
d_clust
max_cluster
?pwr
?pwr.f3.test
?pwr.f2.test
4 - a
4 = a
4 -> a
remove(a)
?Syntax
TRUE || TRUE && FALSE
(TRUE || TRUE) && FALSE
TRUE && FALSE
TRUE || FALSE
d = 2.55
str(d)
d = as.integer(d)
d
str(d)
d = (2, "three")
d = c(2, "three")
str(d)
typeof(d)
d = c(2, 3)
str(d)
typeof(d)
preload_packages
d = c(2,NA)
str(d)
typeof(d)
d = c(2,3)
d == 3
seq(10,5)
seq(10,5,by=1)
seq(10,5,by=-1)
seq(10,5,by=-2)
seq(10,5,by=-10)
seq(10,5,by=-11)
seq(10,5,by=-20)
seq(1,100,by=i)
i
str(i)
# List
my.list <- list(c(3,9),'a string',TRUE,3L)
my.list
my.list[[1]]
my.list[1]
my.list[2]
my.list[[1]]
my.list[[1]][1]
my.list[[1]][2]
my.list[[2]][1]
my.list[[2]][2]
str(my.list)
?list
Months.factor <- factor(Months,
# levels have to correspond to the vector
levels = c('Jan','Mar','Apr','Dec'),
# labels are the names you wish to give to each level
labels = c('Jan','Mar','Apr','Dec'))
# Factor
Months <- c('Dec','Apr','Jan','Mar')
sort(Months) # this sorts it in alphabetical order, but inherently doesn't make sense
Months.factor <- factor(Months,
# levels have to correspond to the vector
levels = c('Jan','Mar','Apr','Dec'),
# labels are the names you wish to give to each level
labels = c('Jan','Mar','Apr','Dec'))
sort(Months)
sort(Months.factor)
Months.new = factor(Months,c('Jan','Mar','Apr',))
Months.new = factor(Months,c('Jan','Mar','Apr','Dec'))
sort(Months.new)
Months.factor
months.new
Months.new
# labels are the names you wish to give to each level
labels = c(1,3',4,12))
Months.factor <- factor(Months,
# levels have to correspond to the vector
levels = c('Jan','Mar','Apr','Dec'),
Months.factor <- factor(Months,
# levels have to correspond to the vector
levels = c('Jan','Mar','Apr','Dec'),
# labels are the names you wish to give to each level
labels = c(1,3,4,12))
Months.factor
Months.factor <- factor(Months,
# levels have to correspond to the vector
# labels are the names you wish to give to each level
labels = c(1,3,4,12))
Months.factor
v = 1:5
v
v[7] = 'new'
v
remove(my.list)
# Let's generate a time-series object and visualize it
t <- seq(0,1,.01)
y <- 1*(t^(-0.3))+rnorm(length(t),0,0.1)
y.ts <- ts(y,start=1990,frequency=4)
head(y.ts)
t
y
y.ts
?ts
d = ts(y,start=1990,frequency=4)
d
d[1]
d[2]
d[3]
d[1,]
d['1990']
d['Qtr1']
d$Qtr1
d$`Qtr1`
# plot using base R
plot(y.ts,xlab='Year',ylab='Blood Lead Level', type='b')
?d
??d
str(d)
# you can get the start, end, frequency from ts objects
start(y.ts)
end(y.ts)
frequency(y.ts)
cycle(y.ts)
# Now, let's add another column, making or time series a matrix
# Let's say that these are blood lead levels from two different areas
y2 <- 1*(t^(-0.5))+rnorm(length(t),0,0.3)
y.mat <- cbind(y,y2)
y.mat.ts <- ts(y.mat,start=1990,frequency=4,class='matrix')
ts.plot(y.mat.ts, col=1:2,xlab='Year',ylab='Blood Lead Level')
legend("topright", c('Zipcode 1', 'Zipcode 2'), lty = 1, col = 1:2, bty = "n")
ts.plot(y.mat.ts, col=1:2,xlab='Year',ylab='Blood Lead Level')
legend("topright", c('Zipcode 1', 'Zipcode 2'), lty = 1, col = 1:2, bty = "n")
install.packages(c("lubridate", "zoo", "xts"))
library("lubridate")
library('zoo')
library('xts')
install.packages("reticulate")
library(reticulate)
conda_create("impute-demo",python_version=3.7)
py_install("pandas")
Y
py_install("datawig")
py_install("DataWig")
library(tufte)
library(ggplot2)
library(astsa)
library(timetk)
install.packages('timetk')
library(timetk)
install.packages('rlang')
install.packages("rlang")
library(tufte)
library(ggplot2)
library(astsa)
library(timetk)
library(tseries)
adf.test(RedNoise)
set.seed(12345)
Hz = 10                  # Sampling frequency (samples per second)
dt = 1/Hz                 # seconds per sample
StopTime = 120            # seconds
t = seq(0,StopTime-1, dt) # seconds
RedNoise <- arima.sim(model = list(ar = 0.995, ma=0),sd = .5, n = length(t))
qplot(t,RedNoise,geom="path", xlab="Time in Seconds", ylab="Position of Head")+theme_bw()
adf.test(RedNoise)
log(10)
log(20)
log(10)/log(290)
log(10)/log(20)
log(10)/log(2000000000)
10/2000000000
10/2000000000*100
log(10/2000000000)
log(10)/log(2000000000)
log(10)/log(20000000000)
log(10)/log(2000000000)
log(1)/log(2000000000)
log(11)/log(2000000000)
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
cur_sounds
all_sounds = cur_sounds
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
str(cur_sounds)
all_sounds = all_sounds + cur_sounds
all_sounds = c(all_sounds,cur_sounds)
setwd("~/Documents/GitHub/F32/stimuli/sounds/link")
cur_sounds = list.files()
all_sounds = c(all_sounds,cur_sounds)
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
all_sounds = c(all_sounds,cur_sounds)
setwd("~/Documents/GitHub/F32/stimuli/sounds/")
write.csv('F32-preload-audio.csv')
write.csv('F32-preload-audio.csv',all_sounds)
getwd()
str(all_sounds)
?write.csv
export = as.data.frame(all_sounds)
write.csv('F32-preload-audio.csv',export)
View(export)
remove(export)
str(all_sounds)
temp = all_sounds
export = data.frame()
length(all_sounds)
for (i in 1:length(all_sounds)) {
print(i)
}
print(all_sounds[i])
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
all_sounds = cur_sounds
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
export = c("[",cur_sounds)
export = "["
for (i in 1:length(cur_sounds)) {
export = c(export,"stimuli/sounds/dot/",cur_sounds[i],".wav, ")
}
export
?paste
export = "["
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],".wav",sep=", ")
}
export
export = "["
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],".wav, ",sep="")
}
export
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],".wav, ",sep="")
}
export
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
export = "["
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],sep="")
}
export
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
export = "["
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],", ",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],", ",sep="")
}
export
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],", ",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],", ",sep="")
}
cur_sounds
export
write = data.frame('audio'=export)
View(write)
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],", ",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/")
write = data.frame('audio'=export)
write.csv('F32-preload.csv',write)
setwd("~/Documents/GitHub/F32/stimuli/")
write = data.frame('audio'=export)
write
write
str(write)
write.csv('F32-preload.csv',write)
write.csv('F32-preload.csv',write)
setwd("~/Documents/GitHub/F32/orders/")
write = data.frame('audio'=export)
write.csv('F32-preload.csv',write)
write = data.frame('audio'=export,'images'="")
write.csv('F32-preload.csv',write)
write
View(write)
save = data.frame('audio'=export,'images'="")
write.csv('F32-preload.csv',save)
write.csv('F32-preload.csv',file=save)
write.csv(save,file='F32-preload.csv')
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/teaching/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/teaching/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/orders/")
save = data.frame('audio'=export,'images'="")
write.csv(save,file='F32-preload.csv')
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
if (i < length(cur_sounds)) {
export = paste(export,"stimuli/sounds/teaching/",cur_sounds[i],",",sep="")
} else {
export = paste(export,"stimuli/sounds/teaching/",cur_sounds[i],sep="")
}
}
setwd("~/Documents/GitHub/F32/orders/")
save = data.frame('audio'=export,'images'="")
write.csv(save,file='F32-preload.csv')
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
export = ""
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/teaching/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/dot/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/link")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
export = paste(export,"stimuli/sounds/link/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
if (i < length(cur_sounds)) {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],",",sep="")
} else {
export = paste(export,"stimuli/sounds/LD/",cur_sounds[i],sep="")
}
}
setwd("~/Documents/GitHub/F32/stimuli/images/")
cur_images = list.files()
for (i in 1:length(cur_sounds)) {
if (i < length(cur_sounds)) {
export = paste(export,"stimuli/images/",cur_images[i],",",sep="")
} else {
export = paste(export,"stimuli/images/",cur_images[i],sep="")
}
}
cur_images
setwd("~/Documents/GitHub/F32/stimuli/images/")
cur_images = list.files()
for (i in 1:length(cur_images)) {
if (i < length(cur_images)) {
export = paste(export,"stimuli/images/",cur_images[i],",",sep="")
} else {
export = paste(export,"stimuli/images/",cur_images[i],sep="")
}
}
export
cur_images
setwd("~/Documents/GitHub/F32/stimuli/sounds/teaching")
cur_sounds = list.files()
all_sounds = ""
for (i in 1:length(cur_sounds)) {
all_sounds = paste(all_sounds,"stimuli/sounds/teaching/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/dot")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
all_sounds = paste(all_sounds,"stimuli/sounds/dot/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/link")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
all_sounds = paste(all_sounds,"stimuli/sounds/link/",cur_sounds[i],",",sep="")
}
setwd("~/Documents/GitHub/F32/stimuli/sounds/LD")
cur_sounds = list.files()
for (i in 1:length(cur_sounds)) {
if (i < length(cur_sounds)) {
all_sounds = paste(all_sounds,"stimuli/sounds/LD/",cur_sounds[i],",",sep="")
} else {
all_sounds = paste(all_sounds,"stimuli/sounds/LD/",cur_sounds[i],sep="")
}
}
all_sounds
setwd("~/Documents/GitHub/F32/stimuli/images/")
cur_images = list.files()
all_images = ""
for (i in 1:length(cur_images)) {
if (i < length(cur_images)) {
all_images = paste(all_images,"stimuli/images/",cur_images[i],",",sep="")
} else {
all_images = paste(all_images,"stimuli/images/",cur_images[i],sep="")
}
}
all_images
setwd("~/Documents/GitHub/F32/orders/")
save = data.frame('audio'=all_sounds,'images'=all_images)
write.csv(save,file='F32-preload.csv')
save
View(save)
?write.csv
save = data.frame('audio'=all_sounds,'images'=all_images,row.names=F)
save = data.frame('audio'=all_sounds,'images'=all_images)
write.csv(save,file='F32-preload.csv',row.names=F)
